res = ddCq[, -c(7,8)]
View(res)
require(NormqPCR)
# Calculating ddCt
# ===
tissue = 'P' # P = plasma; B = biopsy
hk = 'Hs99999902_m1'
cases = 'Severo'  # Leve Severo
ctrl = 'Control'
qpcr = readRDS('~/git/colab-Cordoba/extdata/preprocessed/qPCR.rds')
qpcr = qpcr[, qpcr$tissue == tissue]
# thres = 1.5
paired = T
hkgCalc = 'arith'
statCalc = 'geom'
naomit = F
if (naomit == T) {
qpcr = qpcr[rownames(na.omit(exprs(qpcr)))]
} else{
counts = exprs(qpcr)
npats = ncol(counts)
perc_na = rowSums(is.na(counts))/npats
counts = counts[which(perc_na < 0.3),]
qpcr = qpcr[rownames(counts)]
qpcr = replaceNAs(qpcr, newNA = 40)
}
contM = qpcr@phenoData@data[, c('Leve', 'Severo', 'Control')]
qPCRBatch.norm <- deltaCq(qPCRBatch = qpcr,
hkgs = hk,
calc="arith")
dCq = as.data.frame(t(exprs(qPCRBatch.norm)))
dCq$target = qPCRBatch.norm@phenoData@data$severity
control = dCq[which(dCq$target == ctrl),]
disease = dCq[which(dCq$target == cases),]
l = ncol(dCq) - 1
p.values = list()
for (i in 1:l) {
p.values[[i]] = t.test(disease[,i], control[,i])$p.value
}
names(p.values) = colnames(dCq)[1:l]
p.values = unlist(p.values)
ddCq = deltaDeltaCq(qPCRBatch = qpcr,
maxNACase = 0,
maxNAControl = 0,
hkg = hk,
contrastM = contM,
case = cases,
control = ctrl,
paired = paired,
statCalc = statCalc,
hkgCalc = hkgCalc)
# Check!
# ===
stopifnot(names(p.values) == ddCq$ID)
stopifnot(fData(qpcr)$sondas == ddCq$ID)
ddCq[,2:8] = as.data.frame(apply(ddCq[,2:8], 2, as.numeric))
ddCq$gene = fData(qpcr)$genes
ddCq$pvalues = p.values[match(ddCq$ID, names(p.values))]
ddCq$padj = p.adjust(ddCq$pvalues, method = 'fdr')
res = ddCq[, -c(7,8)]
View(res)
require(NormqPCR)
# Calculating ddCt
# ===
tissue = 'B' # P = plasma; B = biopsy
hk = 'Hs99999902_m1'
cases = 'Severo'  # Leve Severo
ctrl = 'Control'
qpcr = readRDS('~/git/colab-Cordoba/extdata/preprocessed/qPCR.rds')
qpcr = qpcr[, qpcr$tissue == tissue]
# thres = 1.5
paired = T
hkgCalc = 'arith'
statCalc = 'geom'
naomit = F
if (naomit == T) {
qpcr = qpcr[rownames(na.omit(exprs(qpcr)))]
} else{
counts = exprs(qpcr)
npats = ncol(counts)
perc_na = rowSums(is.na(counts))/npats
counts = counts[which(perc_na < 0.3),]
qpcr = qpcr[rownames(counts)]
qpcr = replaceNAs(qpcr, newNA = 40)
}
contM = qpcr@phenoData@data[, c('Leve', 'Severo', 'Control')]
qPCRBatch.norm <- deltaCq(qPCRBatch = qpcr,
hkgs = hk,
calc="arith")
dCq = as.data.frame(t(exprs(qPCRBatch.norm)))
dCq$target = qPCRBatch.norm@phenoData@data$severity
control = dCq[which(dCq$target == ctrl),]
disease = dCq[which(dCq$target == cases),]
l = ncol(dCq) - 1
p.values = list()
for (i in 1:l) {
p.values[[i]] = t.test(disease[,i], control[,i])$p.value
}
names(p.values) = colnames(dCq)[1:l]
p.values = unlist(p.values)
ddCq = deltaDeltaCq(qPCRBatch = qpcr,
maxNACase = 0,
maxNAControl = 0,
hkg = hk,
contrastM = contM,
case = cases,
control = ctrl,
paired = paired,
statCalc = statCalc,
hkgCalc = hkgCalc)
# Check!
# ===
stopifnot(names(p.values) == ddCq$ID)
stopifnot(fData(qpcr)$sondas == ddCq$ID)
ddCq[,2:8] = as.data.frame(apply(ddCq[,2:8], 2, as.numeric))
ddCq$gene = fData(qpcr)$genes
ddCq$pvalues = p.values[match(ddCq$ID, names(p.values))]
ddCq$padj = p.adjust(ddCq$pvalues, method = 'fdr')
res = ddCq[, -c(7,8)]
# View(res)
saveRDS(res, file = paste0('~/git/colab-Cordoba/results/de_mrna_', tissue, '_', cases, '.rds'))
require(NormqPCR)
# Calculating ddCt
# ===
tissue = 'B' # P = plasma; B = biopsy
hk = 'Hs99999902_m1'
cases = 'Leve'  # Leve Severo
ctrl = 'Control'
qpcr = readRDS('~/git/colab-Cordoba/extdata/preprocessed/qPCR.rds')
qpcr = qpcr[, qpcr$tissue == tissue]
# thres = 1.5
paired = T
hkgCalc = 'arith'
statCalc = 'geom'
naomit = F
if (naomit == T) {
qpcr = qpcr[rownames(na.omit(exprs(qpcr)))]
} else{
counts = exprs(qpcr)
npats = ncol(counts)
perc_na = rowSums(is.na(counts))/npats
counts = counts[which(perc_na < 0.3),]
qpcr = qpcr[rownames(counts)]
qpcr = replaceNAs(qpcr, newNA = 40)
}
contM = qpcr@phenoData@data[, c('Leve', 'Severo', 'Control')]
qPCRBatch.norm <- deltaCq(qPCRBatch = qpcr,
hkgs = hk,
calc="arith")
dCq = as.data.frame(t(exprs(qPCRBatch.norm)))
dCq$target = qPCRBatch.norm@phenoData@data$severity
control = dCq[which(dCq$target == ctrl),]
disease = dCq[which(dCq$target == cases),]
l = ncol(dCq) - 1
p.values = list()
for (i in 1:l) {
p.values[[i]] = t.test(disease[,i], control[,i])$p.value
}
names(p.values) = colnames(dCq)[1:l]
p.values = unlist(p.values)
ddCq = deltaDeltaCq(qPCRBatch = qpcr,
maxNACase = 0,
maxNAControl = 0,
hkg = hk,
contrastM = contM,
case = cases,
control = ctrl,
paired = paired,
statCalc = statCalc,
hkgCalc = hkgCalc)
# Check!
# ===
stopifnot(names(p.values) == ddCq$ID)
stopifnot(fData(qpcr)$sondas == ddCq$ID)
ddCq[,2:8] = as.data.frame(apply(ddCq[,2:8], 2, as.numeric))
ddCq$gene = fData(qpcr)$genes
ddCq$pvalues = p.values[match(ddCq$ID, names(p.values))]
ddCq$padj = p.adjust(ddCq$pvalues, method = 'fdr')
res = ddCq[, -c(7,8)]
# View(res)
saveRDS(res, file = paste0('~/git/colab-Cordoba/results/de_mrna_', tissue, '_', cases, '.rds'))
require(NormqPCR)
# Calculating ddCt
# ===
tissue = 'P' # P = plasma; B = biopsy
hk = 'Hs99999902_m1'
cases = 'Leve'  # Leve Severo
ctrl = 'Control'
qpcr = readRDS('~/git/colab-Cordoba/extdata/preprocessed/qPCR.rds')
qpcr = qpcr[, qpcr$tissue == tissue]
# thres = 1.5
paired = T
hkgCalc = 'arith'
statCalc = 'geom'
naomit = F
if (naomit == T) {
qpcr = qpcr[rownames(na.omit(exprs(qpcr)))]
} else{
counts = exprs(qpcr)
npats = ncol(counts)
perc_na = rowSums(is.na(counts))/npats
counts = counts[which(perc_na < 0.3),]
qpcr = qpcr[rownames(counts)]
qpcr = replaceNAs(qpcr, newNA = 40)
}
contM = qpcr@phenoData@data[, c('Leve', 'Severo', 'Control')]
qPCRBatch.norm <- deltaCq(qPCRBatch = qpcr,
hkgs = hk,
calc="arith")
dCq = as.data.frame(t(exprs(qPCRBatch.norm)))
dCq$target = qPCRBatch.norm@phenoData@data$severity
control = dCq[which(dCq$target == ctrl),]
disease = dCq[which(dCq$target == cases),]
l = ncol(dCq) - 1
p.values = list()
for (i in 1:l) {
p.values[[i]] = t.test(disease[,i], control[,i])$p.value
}
names(p.values) = colnames(dCq)[1:l]
p.values = unlist(p.values)
ddCq = deltaDeltaCq(qPCRBatch = qpcr,
maxNACase = 0,
maxNAControl = 0,
hkg = hk,
contrastM = contM,
case = cases,
control = ctrl,
paired = paired,
statCalc = statCalc,
hkgCalc = hkgCalc)
# Check!
# ===
stopifnot(names(p.values) == ddCq$ID)
stopifnot(fData(qpcr)$sondas == ddCq$ID)
ddCq[,2:8] = as.data.frame(apply(ddCq[,2:8], 2, as.numeric))
ddCq$gene = fData(qpcr)$genes
ddCq$pvalues = p.values[match(ddCq$ID, names(p.values))]
ddCq$padj = p.adjust(ddCq$pvalues, method = 'fdr')
res = ddCq[, -c(7,8)]
# View(res)
saveRDS(res, file = paste0('~/git/colab-Cordoba/results/de_mrna_', tissue, '_', cases, '.rds'))
require(NormqPCR)
# Calculating ddCt
# ===
tissue = 'P' # P = plasma; B = biopsy
hk = 'Hs99999902_m1'
cases = 'Severo'  # Leve Severo
ctrl = 'Control'
qpcr = readRDS('~/git/colab-Cordoba/extdata/preprocessed/qPCR.rds')
qpcr = qpcr[, qpcr$tissue == tissue]
# thres = 1.5
paired = T
hkgCalc = 'arith'
statCalc = 'geom'
naomit = F
if (naomit == T) {
qpcr = qpcr[rownames(na.omit(exprs(qpcr)))]
} else{
counts = exprs(qpcr)
npats = ncol(counts)
perc_na = rowSums(is.na(counts))/npats
counts = counts[which(perc_na < 0.3),]
qpcr = qpcr[rownames(counts)]
qpcr = replaceNAs(qpcr, newNA = 40)
}
contM = qpcr@phenoData@data[, c('Leve', 'Severo', 'Control')]
qPCRBatch.norm <- deltaCq(qPCRBatch = qpcr,
hkgs = hk,
calc="arith")
dCq = as.data.frame(t(exprs(qPCRBatch.norm)))
dCq$target = qPCRBatch.norm@phenoData@data$severity
control = dCq[which(dCq$target == ctrl),]
disease = dCq[which(dCq$target == cases),]
l = ncol(dCq) - 1
p.values = list()
for (i in 1:l) {
p.values[[i]] = t.test(disease[,i], control[,i])$p.value
}
names(p.values) = colnames(dCq)[1:l]
p.values = unlist(p.values)
ddCq = deltaDeltaCq(qPCRBatch = qpcr,
maxNACase = 0,
maxNAControl = 0,
hkg = hk,
contrastM = contM,
case = cases,
control = ctrl,
paired = paired,
statCalc = statCalc,
hkgCalc = hkgCalc)
# Check!
# ===
stopifnot(names(p.values) == ddCq$ID)
stopifnot(fData(qpcr)$sondas == ddCq$ID)
ddCq[,2:8] = as.data.frame(apply(ddCq[,2:8], 2, as.numeric))
ddCq$gene = fData(qpcr)$genes
ddCq$pvalues = p.values[match(ddCq$ID, names(p.values))]
ddCq$padj = p.adjust(ddCq$pvalues, method = 'fdr')
res = ddCq[, -c(7,8)]
# View(res)
saveRDS(res, file = paste0('~/git/colab-Cordoba/results/de_mrna_', tissue, '_', cases, '.rds'))
severo = readRDS('~/git/colab-Cordoba/results/de_mrna_P_Severo.rds')
leve = readRDS('~/git/colab-Cordoba/results/de_mrna_B_Leve.rds')
fData(qpcr)
load('d:/Users/jlinares/Downloads/example_dumbble.RData')
require(ggalt)
p2 = ggplot(df, aes(y=fs.technique, x=train, xend=test, colour=ml.model)) +
geom_dumbbell(size=3, colour_x = "#440154FF", colour_xend = "#FDE725FF", show.legend = T,
dot_guide=TRUE, dot_guide_size=0.25, position=position_dodgev(height = 0.4)) +
labs(x=NULL, y=NULL, title=NULL,subtitle=NULL) +
theme_minimal() +
theme(panel.grid.major.x=element_line(size=0.05),legend.title = element_blank())
# Scatter Plot GSEA
# ===
resB_severo = readRDS('~/git/colab-Cordoba/data/GSEA_B_severo.rds')
resB_severo$severity = 'severo'
resB_leve = readRDS('~/git/colab-Cordoba/data/GSEA_B_leve.rds')
resB_leve$severity = 'leve'
resB = rbind.data.frame(resB_severo, resB_leve)
resB.sig = resB[which(resB$pval < 0.001),]
resB.sig$shape = ifelse(resB.sig$NES < 0, 'Negative', 'Positive')
resB.sig$tissue = 'biopsia'
resP_severo = readRDS('~/git/colab-Cordoba/data/GSEA_P_severo.rds')
resP_severo$severity = 'severo'
resP_leve = readRDS('~/git/colab-Cordoba/data/GSEA_P_leve.rds')
resP_leve$severity = 'leve'
resP = rbind.data.frame(resP_severo, resP_leve)
resP.sig = resP[which(resP$pval < 0.005),]
resP.sig$shape = ifelse(resP.sig$NES < 0, 'Negative', 'Positive')
resP.sig$tissue = 'plasma'
res = rbind.data.frame(resB.sig, resP.sig)
res$padj.sig = ifelse(res$padj < 0.05, '*', 'ns')
library(ggplot2)
require(viridis)
ggplot(res,
aes(y = pathway,
x = severity,
size = -log10(pval))) +
geom_point(aes(fill = abs(NES),
shape = shape,
color = padj.sig), alpha = 1.0) +
scale_shape_manual(values = c(25, 24)) +
facet_wrap(~tissue) +
# geom_tile(aes(width = Inf, fill = subset), alpha = 0.4) +
theme_minimal() +
theme(axis.text.y = element_text(size = 5))
# Scatter Plot GSEA
# ===
resB_severo = readRDS('~/git/colab-Cordoba/data/GSEA_B_severo.rds')
resB_severo$severity = 'severo'
resB_leve = readRDS('~/git/colab-Cordoba/data/GSEA_B_leve.rds')
resB_leve$severity = 'leve'
resB = rbind.data.frame(resB_severo, resB_leve)
resB.sig = resB[which(resB$pval < 0.001),]
resB.sig$shape = ifelse(resB.sig$NES < 0, 'Negative', 'Positive')
resB.sig$tissue = 'biopsia'
resP_severo = readRDS('~/git/colab-Cordoba/data/GSEA_P_severo.rds')
resP_severo$severity = 'severo'
resP_leve = readRDS('~/git/colab-Cordoba/data/GSEA_P_leve.rds')
resP_leve$severity = 'leve'
resP = rbind.data.frame(resP_severo, resP_leve)
resP.sig = resP[which(resP$pval < 0.005),]
resP.sig$shape = ifelse(resP.sig$NES < 0, 'Negative', 'Positive')
resP.sig$tissue = 'plasma'
res = rbind.data.frame(resB.sig, resP.sig)
res$padj.sig = ifelse(res$padj < 0.05, '*', 'ns')
library(ggplot2)
require(viridis)
ggplot(res,
aes(y = pathway,
x = severity,
size = -log10(pval))) +
geom_point(aes(fill = abs(NES),
shape = shape,
color = padj.sig), alpha = 1.0) +
scale_shape_manual(values = c(25, 24)) +
facet_wrap(~tissue) +
# geom_tile(aes(width = Inf, fill = subset), alpha = 0.4) +
theme_minimal() +
theme(axis.text.y = element_text(size = 5))
require(haven)
dataset = read_sav('d:/Users/jlinares/Downloads/epidural.sav')
View(dataset)
class(dataset)
dataset = as.data.frame(dataset)
class(dataset)
dataset$EPIDURAL
prop.table(dataset$EPIDURAL)
table(dataset$EPIDURAL)
pie(table(dataset$EPIDURAL),
labels = c('Si', 'No'),
main = 'Diagrama de sectores')
table(dataset$EPIDURAL)
dataset$EPIDURAL
table(dataset$EPIDURAL)
pie(table(dataset$EPIDURAL),
labels = c('NO epidural', 'Si epidural'),
main = 'Diagrama de sectores')
## Diagrama de barras
barplot(table(dataset$EPIDURAL))
## Diagrama de barras
barplot(table(dataset$EPIDURAL), xlab = c('No epidural', 'Si epidural'))
## Diagrama de barras
barplot(table(dataset$EPIDURAL), xlim = c('NO', 'Si'))
# Ej2
## Histograma
hist(dataset$edad, 100)
## Diagrama de cajas
boxplot(dataset$edad)
# Ej3
## Grafica das medias
plot(dataset$OXITOCIN, dataset$DILATACI)
# Ej3
## Grafica das medias
boxplot(dataset$OXITOCIN, dataset$DILATACI)
require(gplots)
## Grafica das medias
plotmeans(OXITOCIN ~ DILATACI, data = dataset, frame = FALSE)
require(gplots)
## Grafica das medias
plotmeans(OXITOCIN ~ DILATACI, data = dataset, frame = FALSE)
## Grafica das medias
plotmeans(DILATACI ~ OXITOCIN , data = dataset, frame = FALSE)
dataset$OXITOCIN
View(dataset)
plot(dataset$DILATACI, dataset$EXPULSIV)
plot(dataset$DILATACI, dataset$EXPULSIV)
View(dataset)
boxplot(dataset$TIPOPAR, dataset$edad)
dataset$TIPOPAR
boxplot(dataset$TIPOPAR, dataset$edad)
boxplot(dataset$edad, dataset$TIPOPAR)
table(dataset$edad, dataset$TIPOPAR)
table(dataset$edad, as.character(dataset$TIPOPAR))
boxplot(dataset$edad, as.character(dataset$TIPOPAR))
dataset$TIPOPAR
class(dataset$TIPOPAR)
as.vector(dataset$TIPOPAR)
boxplot(dataset$edad, as.vector(dataset$TIPOPAR))
boxplot(as.vector(dataset$edad), as.vector(dataset$TIPOPAR))
boxplot(as.vector(dataset$edad), as.vector(dataset$TIPOPAR))
require(ggpubr)
ggboxplot(dataset, x = 'TIPOPAR', y = 'edad')
require(ggpubr)
ggboxplot(dataset, x = 'TIPOPAR', y = 'edad')
xx = readRDS('d:/Users/jlinares/Documents/projects/SurvivalTCGA-COAD/annotations/annot_GPL570_signature.rds')
xx
xx = readRDS('d:/Users/jlinares/Documents/projects/SurvivalTCGA-COAD/annotations/signatures.rds')
xx
xx$ours
xx = readRDS('d:/Users/jlinares/Documents/projects/SurvivalTCGA-COAD/annotations/signaturesv2.rds')
xx
xx$ours
setwd('~/git/Review-MLAID/benchmark/results/single-omic/')
files = list.files()
time = list()
l = list()
res = list()
for (f in seq_along(files)) {
data = readRDS(files[f])
# data = data[-c(3)]
for (i in seq_along(data)) {
l[[i]] = data.frame(
ids = names(data[[i]]$labels),
labels = data[[i]]$labels
)
colnames(l[[i]])[2] = names(data)[i]
}
x = as.data.frame(l)
res[[f]] = x[,-grep('id', colnames(x))]
}
names(res) = files
res
setwd('~/git/Review-MLAID/benchmark/data/single-omic/')
xx = readRDS('exp_GSE45291_RA_filtered.rds')
xx
xx = readRDS('../../results/single-omic/transcriptomic_exp_GSE45291_RA_filtered.rds')
xx$Consensus.H$labels
xx$NMF$labels
table(xx$NMF$labels)
table(xx$Consensus.H$labels)
# Required packages
# ===
require(AnnotationDbi)
require(OmnipathR)
require(org.Hs.eg.db)
require(dplyr)
require(igraph)
require(ggplot2)
require(ggraph)
annot = read.csv('extdata/cytof/annotation_markers.csv', header = F, skip = 1)
setwd('~/git/network-cytof/')
annot = read.csv('extdata/cytof/annotation_markers.csv', header = F, skip = 1)
annot
annot = annot[, -1]
names(annot) = annot[1,]
annot = annot[-1, ]
row.names(annot) = 1:nrow(annot)
annot
require(org.Hs.eg.db)
mapIds(org.Hs.eg.db, 'p38', 'ALIAS', 'SYMBOL')
mapIds(org.Hs.eg.db, 'p38', 'ALIAS', 'SYMBOL')
keytypes(org.Hs.eg.db)
mapIds(org.Hs.eg.db,
keys = 'p38', column = 'ALIAS', keytype = 'SYMBOL')
mapIds(org.Hs.eg.db,
keys = 'p38', column = 'SYMBOL', keytype = 'ALIAS')
select(org.Hs.eg.db,
keys = 'p38',
columns = c('SYMBOL', 'UNIPROT'),
keytype = 'ALIAS')
?mapIds
